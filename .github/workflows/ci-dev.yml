# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: deploy dev

on:
  push:
    branches:
      - develop

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: us-east-1
  JWT_TOKEN_LOCATION: 'headers cookies'
  DIST_HOME: 'pierogis-dev/dist/'
  DIST_DIR: ${{ github.sha }}
  SERVER_NAME: 'pierogis.dev'
  DATABASE_SERVER_URL: ${{ secrets.DATABASE_SERVER_URL }}
  STAGE: 'dev'


jobs:
  deploy-develop-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: install dependencies
        shell: bash
        run: |
          pip install fabric
          pip install -r requirements.txt
          pip install Flask-Migrate

      - name: compile sass
        shell: bash
        run: |
          wget https://github.com/sass/dart-sass/releases/download/1.32.5/dart-sass-1.32.5-linux-x64.tar.gz
          tar -xvzf dart-sass-1.32.5-linux-x64.tar.gz
          source compile_sass.sh

      - name: build package
        shell: bash
        run: |
          fab build

      - name: upload to aws
        shell: bash
        run: |
          pip install -U awscli
          python -m awscli s3 sync --exact-timestamps ./dist "s3://$DIST_HOME/$DIST_DIR"

      - name: launch and bootstrap instances
        shell: bash
        run: |
          fab launch --stage=$STAGE
          echo "$SSH_KEY" >> ~/.ssh/pierogis-live.pem
          fab bootstrap --stage=$STAGE --key=~/.ssh/pierogis-live.pem
        env:
          SSH_KEY: ${{secrets.AWS_KEY}}

      - name: deploy to instances
        shell: bash
        run: |
          pip install Flask-Migrate dotenv-python
          fab deploy --stage=$STAGE

      - name: start servers
        shell: bash
        run: |
          fabric start --stage=$STAGE