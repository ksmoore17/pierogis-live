# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: upload pierogis-live

on:
  push:
    tags:
      - v*

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: us-east-1
  DIST_DIR: ${{ github.sha }}

jobs:
  sdist-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

#      - name: install rust
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          target: ${{ matrix.platform.rust-target }}
#          profile: minimal
#          default: true
      - name: install dependencies
        run:
          pip install fabric
          python setup.py develop

      - name: build
        run: |
          fab build

      - name: upload to aws
        shell: bash
        run: |
          pip install -U awscli
          python -m awscli s3 sync --exact-timestamps ./dist "s3://pierogis.live/dist/$DIST_DIR"

      - name: deploy
        run: |
          fab launch
          fab bootstrap
          fab deploy


  publish:
    runs-on: ubuntu-latest
    needs: [ manylinux-build, macos-windows-build ]
    steps:
      - uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2

      - name: retrieve all wheels
        shell: bash
        run: |
          pip install awscli
          aws s3 sync "s3://pierogis.live/dist/$DIST_DIR" ./dist
      - name: Install dependencies
        run: |
          pip install setuptools wheel setuptools-rust
      - name: create source distribution
        run: |
          python setup.py sdist

      - name: upload to PyPi
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install twine
          twine upload dist/* -u __token__ -p "$PYPI_TOKEN"
